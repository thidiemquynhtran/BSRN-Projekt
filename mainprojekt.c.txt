#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>

#define PORT 12345
#define BUFFER_SIZE 1024

void conv_process(int socket) {
    // Logic of the Conv process
    // Generate random numbers and send them over the socket
    srand(getpid()); // Initialize the random number generator with the process ID

    while (1) {
        int random_number = rand() % 100;
        printf("Generated random number: %d\n", random_number);

        // Send the random number over the socket
        if (send(socket, &random_number, sizeof(random_number), 0) == -1) {
            perror("Error sending data");
            exit(1);
        }
        sleep(1); // Wait for 1 second between sending numbers
    }
}

void log_process(int socket) {
    // Logic of the Log process
    // Receive values from the Conv process and write them to a local file
    FILE *file = fopen("log.txt", "w");
    if (file == NULL) {
        perror("Error opening file");
        exit(1);
    }

    int received_number;

    while (1) {
        if (recv(socket, &received_number, sizeof(received_number), 0) == -1) {
            perror("Error receiving data");
            exit(1);
        }
        printf("Received number: %d\n", received_number);

        fprintf(file, "%d\n", received_number);
        fflush(file); // Flush the file buffer to ensure immediate write
    }

    fclose(file);
}

void stat_process(int socket) {
    // Logic of the Stat process
    // Receive values from the Conv process, perform statistical calculations, and send the results to the Report process
    int received_number;
    int sum = 0;
    int count = 0;

    while (1) {
        if (recv(socket, &received_number, sizeof(received_number), 0) == -1) {
            perror("Error receiving data");
            exit(1);
        }
        printf("Received number: %d\n", received_number);

        sum += received_number;
        count++;

        double average = (double) sum / count;
        printf("Sum: %d, Average: %.2f\n", sum, average);

        // Send the calculated statistics to the Report process
        if (send(socket, &average, sizeof(average), 0) == -1) {
            perror("Error sending data");
            exit(1);
        }
    }
}

void report_process(int socket) {
    // Logic of the Report process
    // Receive values from the Stat process and generate reports
    double received_average;

    while (1) {
        if (recv(socket, &received_average, sizeof(received_average), 0) == -1) {
            perror("Error receiving data");
            exit(1);
        }
        printf("Received average: %.2f\n", received_average);

        // Generate reports based on the received data
        // Add your report generation logic here
    }
}

void sigint_handler(int signum) {
    // Signal handler logic
    // Close sockets and exit gracefully

    // Free any other resources (e.g., shared memory, semaphores) if applicable

    exit(0);
}

int main() {
    signal(SIGINT, sigint_handler); // Register SIGINT signal handler

    pid_t conv_pid, log_pid, stat_pid, report_pid;
    int conv_sockets[2], log_sockets[2], stat_sockets[2], report_sockets[2];

    // Create sockets for inter-process communication
    if (socketpair(AF_UNIX, SOCK_STREAM, 0, conv_sockets) == -1 ||
        socketpair(AF_UNIX, SOCK_STREAM, 0, log_sockets) == -1 ||
        socketpair(AF_UNIX, SOCK_STREAM, 0, stat_sockets) == -1 ||
        socketpair(AF_UNIX, SOCK_STREAM, 0, report_sockets) == -1) {
        perror("Error creating sockets");
        exit(1);
    }

    // Conv process
    conv_pid = fork();
    if (conv_pid == 0) {
        // Child process: Conv
        close(conv_sockets[0]);
        close(log_sockets[0]);
        close(stat_sockets[0]);
        close(report_sockets[0]);

        conv_process(conv_sockets[1]);
        exit(0);
    } else if (conv_pid > 0) {
        // Parent process
        printf("Conv process started with PID: %d\n", conv_pid);
        close(conv_sockets[1]);
    } else {
        // Fork failed
        perror("Error forking Conv process");
        exit(1);
    }

    // Log process
    log_pid = fork();
    if (log_pid == 0) {
        // Child process: Log
        close(log_sockets[0]);
        close(conv_sockets[0]);
        close(stat_sockets[0]);
        close(report_sockets[0]);

        log_process(log_sockets[1]);
        exit(0);
    } else if (log_pid > 0) {
        // Parent process
        printf("Log process started with PID: %d\n", log_pid);
        close(log_sockets[1]);
    } else {
        // Fork failed
        perror("Error forking Log process");
        exit(1);
    }

    // Stat process
    stat_pid = fork();
    if (stat_pid == 0) {
        // Child process: Stat
        close(stat_sockets[0]);
        close(conv_sockets[0]);
        close(log_sockets[0]);
        close(report_sockets[0]);

        stat_process(stat_sockets[1]);
        exit(0);
    } else if (stat_pid > 0) {
        // Parent process
        printf("Stat process started with PID: %d\n", stat_pid);
        close(stat_sockets[1]);
    } else {
        // Fork failed
        perror("Error forking Stat process");
        exit(1);
    }

    // Report process
    report_pid = fork();
    if (report_pid == 0) {
        // Child process: Report
        close(report_sockets[0]);
        close(conv_sockets[0]);
        close(log_sockets[0]);
        close(stat_sockets[0]);

        report_process(report_sockets[1]);
        exit(0);
    } else if (report_pid > 0) {
        // Parent process
        printf("Report process started with PID: %d\n", report_pid);
        close(report_sockets[1]);
    } else {
        // Fork failed
        perror("Error forking Report process");
        exit(1);
    }

    // Wait for all child processes to exit
    int status;
    pid_t pid;
    while ((pid = wait(&status)) > 0) {
        printf("Child process with PID %d exited.\n", pid);
    }

    return 0;
}

